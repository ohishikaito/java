/*-< 演習：Ex1_14_2 >---------------------------------
コマンドライン引数から1つ以上の数値を受け取り、この1つ1つの数値を購入した商品の定価としたとき、
合計金額を求め、その金額に応じた値引きを利かせ、最後に消費税（8％とする）をのせた金額を表示するプログラムを作りたい。
mainメソッドの内容は書き換えずに処理が通るようなメソッドを仕様に従って書いてください。
----------------------------------------------------*/
public class Main {
  // ！！！mainメソッドの処理は書き換えないでください！！！
  public static void main(String[] args1) {
    String[] args = { "0", "0", "50000" };
    int totalPrice = 0; // 購入した商品の合計金額
    // コマンドライン引数から購入した商品の合計金額（定価）を取得
    for (int i = 0; i < args.length; i++) {
      totalPrice += Integer.parseInt(args[i]);
    }
    // discountメソッドを使って値引きを適用し、値引き後の金額を取得
    int discountedPrice = discount(totalPrice); // 値引き後の金額
    // calcTaxPaymentメソッドを使って支払金額（税込）を取得
    int taxPayment = calcTaxPayment(discountedPrice); // 支払金額（税込）
    // 支払金額（税込）を表示
    System.out.println("値引き後の支払金額：" + taxPayment + "円");
  }

  /*
   ** 以下の仕様を持つメソッドcalcTaxPaymentを作成してください。 - 引数として受け取った値の税込価格（消費税は8％とする）を計算して返す -
   * 税込価格は整数（小数点以下切り捨て）で返す
   */
  static int calcTaxPayment(int price) { // アンダーバーを適切な内容に書き換えてください
    System.out.println(price);
    return (int) (price * 1.08);
  }

  /*
   ** 以下の仕様を持つメソッドdiscountを作成してください。 -
   * 引数として受け取った値が1000円以上5000円以下の場合、1000円より大きい分について10％割引にする -
   * 引数として受け取った値が5000円より大きい場合、1000円より大きく5000円以下の分について10％割引、5000円より大きい分について20％割引にする
   ** - 値引き額は小数点以下切り捨てで計算する（キャストを使いましょう） - 割引金額の上限は5000円とする
   */

  static int discount(int price) { // アンダーバーを適切な内容に書き換えてください
    final int DISCOUNT_BORDER1 = 1000; // 値引き発生の境界値（1000円）
    final int DISCOUNT_BORDER2 = 5000; // 値引き発生の境界値（5000円）
    final double DISCOUNT_RATE1 = 0.1; // 値引き率（1000円以上5000未満）
    final double DISCOUNT_RATE2 = 0.2; // 値引き率（5000円以上）
    final int DISCOUNT_PRICE_MAX = 5000; // 値引き額の上限
    int priceDownTemp = 0; // 仮の値引き額
    // priceDownTempの計算 1000~5000以内の10%引き
    if (DISCOUNT_BORDER1 <= price && price <= DISCOUNT_BORDER2) {
      priceDownTemp = (int) ((price - DISCOUNT_BORDER1) * DISCOUNT_RATE1);
      // ((5000-1000)*0.1 + (10000-5000)*0.2);
    } else if (DISCOUNT_BORDER2 < price) {
      priceDownTemp = (int) ((DISCOUNT_BORDER2 - DISCOUNT_BORDER1) * DISCOUNT_RATE1
          + (price - DISCOUNT_BORDER2) * DISCOUNT_RATE2);
    }
    int priceDown = 0; // 最終的な値引き額
    if (DISCOUNT_PRICE_MAX < priceDownTemp) {
      priceDown = DISCOUNT_PRICE_MAX;
    } else {
      priceDown = priceDownTemp;
    }
    return price - priceDown;
  }

  // static int discount(int totalPrice) { // アンダーバーを適切な内容に書き換えてください
  // int returnPrice = 0;
  // int cutPrice = 0;
  // if (totalPrice >= 1000 && totalPrice <= 5000) {
  // // returnPrice = (int) (totalPrice * 0.9);
  // cutPrice = (int) (totalPrice * 0.1);
  // // returnPrice = totalPrice * 0.9;
  // } else if (totalPrice > 5000) {
  // int over5000_price = totalPrice - 5000;
  // int under5000_price = totalPrice - over5000_price;
  // // System.out.println(under5000_price + ":" + over5000_price);
  // cutPrice += (int) (under5000_price * 0.1);
  // cutPrice += (int) (over5000_price * 0.2);
  // } else {
  // returnPrice = totalPrice;
  // }

  // if (cutPrice > 5000) {
  // System.out.println(cutPrice);
  // cutPrice = 5000;
  // System.out.println(cutPrice);
  // }
  // returnPrice = totalPrice - cutPrice;
  // return returnPrice;
  // }
}
